@page "/faculties"
@using SchoolApp.Admin.Web.Models
@using SchoolApp.Admin.Web.Services
@attribute [StreamRendering]
@inject FacultyService FacultyService
@inject NavigationManager NavigationManager
<div class="container">
    <h3 class="pages-banner">Faculty Members</h3>

@if (_faculties == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <a class="btn btn-primary shadow-none" @onclick="AddFaculty">Add New Faculty</a>
        <table class="table content">
        <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Department</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var faculty in _faculties)
        {
            <tr>
                <td>@faculty.FirstName</td>
                <td>@faculty.LastName</td>
                <td>@faculty.Department</td>
                <td>
                    <a class="btn btn-info" @onclick="() => EditFaculty(faculty.FacultyId)">Edit</a>
                    <a class="btn btn-danger" @onclick="() => DeleteFaculty(faculty.FacultyId)">Delete</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
</div>
@code {
    private IEnumerable<Faculty>? _faculties;

    protected override async Task OnInitializedAsync()
    {
        _faculties = await FacultyService.GetAllFacultiesAsync();
    }

    void AddFaculty()
    {
        NavigationManager.NavigateTo("/faculty/add");
    }

    void EditFaculty(string facultyId)
    {
        NavigationManager.NavigateTo($"/faculty/edit/{facultyId}");
    }

    async Task DeleteFaculty(string facultyId)
    {
        await FacultyService.DeleteFacultyAsync(facultyId);
        _faculties = await FacultyService.GetAllFacultiesAsync(); // Refresh the list
    }
}
@page "/courses"
@using SchoolApp.Admin.Web.Models
@using SchoolApp.Admin.Web.Services
@inject CourseService CourseService
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

<h3>Courses</h3>

@if (_courses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="AddCourse">Add New Course</button>
    <table class="table">
        <thead>
        <tr>
            <th>Course Code</th>
            <th>Course Name</th>
            <th>Credits</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var course in _courses)
        {
            <tr>
                <td>@course.CourseCode</td>
                <td>@course.CourseName</td>
                <td>@course.Credits</td>
                <td>
                    <button class="btn btn-info" @onclick="() => EditCourse(course.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteCourse(course.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Course>? _courses;

    protected override async Task OnInitializedAsync()
    {
        _courses = await CourseService.GetAllCoursesAsync();
    }

    void AddCourse()
    {
        NavigationManager.NavigateTo("/course/add");
    }

    void EditCourse(int courseId)
    {
        NavigationManager.NavigateTo($"/course/edit/{courseId}");
    }

    async Task DeleteCourse(int courseId)
    {
        await CourseService.DeleteCourseAsync(courseId);
        _courses = await CourseService.GetAllCoursesAsync(); // Refresh the list
    }
}
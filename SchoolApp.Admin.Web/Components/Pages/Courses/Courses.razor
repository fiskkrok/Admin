@page "/courses"
@using SchoolApp.Admin.Web.Models
@using SchoolApp.Admin.Web.Services
@implements IDisposable
@attribute [StreamRendering]
@inject CourseService CourseService
@inject ILogger<Courses> Logger
@inject NavigationManager Nav

<div class="container">

    <h3 class="pages-banner">Courses</h3>

@if (_courses == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <a class="btn btn-primary shadow-none" href="/course/add">Add New Course</a>
    <table class="table content">
        <thead>
        <tr>
            <th>Course Code</th>
            <th>Course Name</th>
            <th>Credits</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var course in _courses)
        {
            <tr>
                <td>@course.CourseCode</td>
                <td>@course.CourseName</td>
                <td>@course.Credits</td>
                <td>
                    <a class="btn btn-info" href="/course/edit/@course.Id">Edit</a>
                    <button class="btn btn-danger" @onclick="@(() => DeleteCourse(course.Id))">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
</div>
@code {
    private IEnumerable<Course>? _courses;

    protected override async Task OnInitializedAsync()
    {
        _courses = await CourseService.GetAllCoursesAsync();
    }

    [JSInvokable]
    async Task DeleteCourse(int courseId)
    {
        await CourseService.DeleteCourseAsync(courseId);
        _courses = await CourseService.GetAllCoursesAsync(); // Refresh the list
    }
    protected override void OnInitialized()
    {
        Nav.LocationChanged += HandleLocationChanged;
    }
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Logger.LogInformation("URL of new location: {Location}", e.Location);
    }
    public void Dispose()
    {
        Nav.LocationChanged -= HandleLocationChanged;
    }
}